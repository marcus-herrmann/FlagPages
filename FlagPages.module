<?php

/**
 *
 * Flag Pages Module
 *
 * @author Marcus
 * https://github.com/marcus-herrmann/FlagPages
 *
 * @date_created 07/19/2014
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

require_once 'includes/autoload.php';

class FlagPages extends WireData implements Module, ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			"title" => "FlagPages",
			"version" => 020,
			"summary" => "Lets logged-in user flag page content"
		);
	}

	public function __construct() {
		PWModuleConfigHelper::apply($this, self::$defaultConfig);
	}


	public static function getModuleConfigInputfields(array $data) {
		return PWModuleConfigHelper::renderForm($data, self::$defaultConfig);
	}

	protected static $defaultConfig = array(
		'allowedRoles'  => array(
			'label' => 'User roles allowed to flag (use spaces to seperate entries)',
			'value' => 'superuser',
			'inputfieldType' => 'InputfieldText'
		)
	);


	public function install() {

		/*
		 * Create flaggedpages field and assign it to user template
		 */

		if(!$this->fields->get("flaggedpages")) {

			$f = new Field();
			$f->type = $this->modules->get("FieldtypePage");
			$f->name = "flaggedpages";
			$f->label = "Flagged Pages";
			$f->description = "References to flagged pages " . $this->awesomeSetting["label"];
			$f->save();

			$fg = $this->fieldgroups->get('user');
			$fg->add($f);
			$fg->save();

			$this->message("Module is installed");

		}

	}

	public function uninstall() {

		/*
 		* Delete flaggedpages field
 		*/

		$fp = $this->fields->get("flaggedpages");
		$fg = $this->fieldgroups->get('user');
		$fg->remove($fp);
		$fg->save();

		$this->message("Module is uninstalled");
	}



	public function renderLink($add, $remove) {

		/*
		 * Render link switch to flag/unflag pages
		 */

		$user = $this->user;
		$input = $this->input;
		$page = $this->page;
		$pages = $this->pages;
		$session = $this->session;
		$userFlaggedPages = $this->user->flaggedpages;
		$user_role_stack = array();

		$add = ($add ? $add : "Add %s to flags");
		$remove = ($remove ? $remove : "Remove %s from flags");

		$addLabel = sprintf($add, $page->title);
		$removeLabel = sprintf($remove, $page->title);

		// Convert roles from module setting into array
		$allowed_role_stack = explode(" ", $this->allowedRoles);

		// Create simplified user role array in order to check intersection
		foreach($user->roles as $role) {
			array_push($user_role_stack, $role->name);
		}

		if ($user->isLoggedin() && (array_intersect($allowed_role_stack, $user_role_stack))) {

			$label = ($userFlaggedPages->has($page) ? $removeLabel : $addLabel);

			echo "<a href='{$page->url}?flag={$page->id}'>{$label}</a>";


			if ($input->get("flag")) {
				$p = $input->get("flag");

				$user->setOutputFormatting(false);

				if ($userFlaggedPages->has($pages->get($p))) {
					$userFlaggedPages->remove($pages->get($p));
				} else {
					$userFlaggedPages->add($pages->get($p));
				}

				$user->save();
				$session->redirect($pages->get($p)->url);

			}
		}
	}

	public function renderList() {

		/*
 		 * Provide a list for navigating to, and removing user's flags
 		 */

		$userFlaggedPages = $this->user->flaggedpages;


		if ($this->user->isLoggedin() && $userFlaggedPages) {

			echo "<ul>";

			foreach($userFlaggedPages as $f) {
				echo "<li><a href='" . $f->url . "'>" . $f->title . "</a></li>";
			}

			echo "</ul>";

		}
	}

	public function init() {}


}
