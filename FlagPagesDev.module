<?php

/**
 *
 * Flag Pages Module
 *
 * @author Marcus
 * https://github.com/somatonic/MarkupSimpleNavigation
 *
 * @date_created 07/19/2014
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class FlagPagesDev extends WireData implements Module {

	public static function getModuleInfo() {
		return array(
			"title" => "FlagPages",
			"version" => 001,
			"summary" => "Lets logged in user flag your content",
			"autoload" => false,
			"singular" => true
		);
	}

	public function install() {

		/*
		 * Create flaggedpages field and assign it to user template
		 */

		$f = new Field();
		$f->type = $this->modules->get("FieldtypePage");
		$f->name = "flaggedpages";
		$f->label = "Flagged Pages";
		$f->description = "References to flagged pages ";
		$f->save();

		$fg = $this->fieldgroups->get('user');
		$fg->add($f);
		$fg->save();

		$this->message("Module is installed");

	}

	public function uninstall() {

		/*
 		* Delete flaggedpages field
 		*/

		$fp = $this->fields->get("flaggedpages");
		$fg = $this->fieldgroups->get('user');
		$fg->remove($fp);
		$fg->save();
		//$fp->delete(); @TODO delete flaggedpages completely

		$this->message("Module is uninstalled");
	}



	public function renderLink($prefixAdd, $prefixRemove, $suffixAdd, $suffixRemove) {

		/*
		 * Render link switch to flag/unflag pages
		 */

		$user = $this->user;
		$input = $this->input;
		$page = $this->page;
		$pages = $this->pages;
		$session = $this->session;

		if ($user->isLoggedin()) {

			$userFlaggedPages = $this->user->flaggedpages;

			$prefix = ($userFlaggedPages->has($page) ? $prefixRemove : $prefixAdd);
			$suffix = ($userFlaggedPages->has($page) ? $suffixRemove : $suffixAdd);

			echo "<a href='{$page->url}?flag={$page->id}'>{$prefix} {$page->title} {$suffix}</a>"; // @TODO post instead of get


			if ($input->get("flag")) {
				$p = $input->get("flag");

				$user->setOutputFormatting(false);

				if ($userFlaggedPages->has($pages->get($p))) {
					$userFlaggedPages->remove($pages->get($p));
				} else {
					$userFlaggedPages->add($pages->get($p));
				}

				$user->save();
				$session->redirect($pages->get($p)->url);

			}
		}
	}

	public function listFlaggedPages($labelRemove) {

		/*
 		 * Provide a list for navigating to, and removing user's flags
 		 */

		$userFlaggedPages = $this->user->flaggedpages;

		$label = ($labelRemove ? $labelRemove : 'Remove');

		if ($this->user->isLoggedin() && $userFlaggedPages) {

			echo "<ul>";
			foreach($userFlaggedPages as $f) {
				echo "<li><a href='" . $f->url . "'>" . $f->title . "</a>
						(<a href='" . $f->url . "?flag={$f->id}' >{$label}</a>)</li>"; // @TODO post instead of get
			}
			echo "</ul>";
		}

	}

	public function init() {}

}
